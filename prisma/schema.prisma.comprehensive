// Unified Prisma Schema for EdPsych AI Platform
// UK-focused educational technology platform with workflow automation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE USER MODELS ====================

model User {
  id                String                @id @default(cuid())
  email             String                @unique
  emailVerified     DateTime?
  name              String?
  password          String?
  image             String?
  role              UserRole              @default(STUDENT)
  roles             String[]              @default([])
  status            UserStatus            @default(ACTIVE)
  
  // UK-specific fields
  title             String?               // Mr, Mrs, Ms, Dr, etc.
  preferredName     String?
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  studentProfile    StudentProfile?
  teacherProfile    TeacherProfile?
  parentProfile     ParentProfile?
  
  // Workflow relations
  createdWorkflows  Workflow[]            @relation("WorkflowCreator")
  workflowRuns      WorkflowRun[]
  
  // Communication
  sentMessages      Message[]             @relation("SentMessages")
  receivedMessages  Message[]             @relation("ReceivedMessages")
  notifications     Notification[]
  
  // Learning & Progress
  courseEnrollments Enrollment[]
  assessmentResults AssessmentResult[]
  achievements      Achievement[]
  gameProfile       GameProfile?
  
  // Settings
  preferences       UserPreferences?
  accessibility     AccessibilitySettings?
  integrations      UserIntegration[]
  
  // Institutional Management (Research Foundation)
  institutionId     String?
  institution       Institution?          @relation("UserInstitution", fields: [institutionId], references: [id])
  adminInstitutions Institution[]         @relation("InstitutionAdmins")
  managedInstitutions Institution[]       @relation("InstitutionManagers")
  departments       Department[]          @relation("UserDepartment")
  managedDepartments Department[]         @relation("DepartmentManagers")
  auditLogs         AuditLog[]            @relation("AuditLogPerformedBy")
  
  // New institutional relations
  institutionalAccess Boolean              @default(false)
  institutionAdminsJunction InstitutionAdmins[] @relation("InstitutionAdminsJunction")
  departmentMembersJunction DepartmentMembers[] @relation("DepartmentMembersJunction")
  activities        UserActivity[]        @relation("UserActivities")
  interests         UserInterest[]        @relation("UserInterests")
  communicationLogs CommunicationLog[]    @relation("CommunicationLogs")
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

model Profile {
  id                String                @id @default(cuid())
  userId            String                @unique
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal details
  dateOfBirth       DateTime?
  gender            String?
  ethnicity         String?               // For diversity reporting
  firstLanguage     String?
  additionalLanguages String[]
  
  // Contact details
  phoneNumber       String?
  alternativeEmail  String?
  address           Address?
  
  // Emergency contact
  emergencyContact  EmergencyContact?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

// ==================== ROLE-SPECIFIC PROFILES ====================

model StudentProfile {
  id                String                @id @default(cuid())
  userId            String                @unique
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // School details
  schoolId          String
  school            School                @relation(fields: [schoolId], references: [id])
  yearGroup         Int                   // UK year groups (Reception=0, Year 1=1, etc.)
  form              String?               // Form/tutor group
  houseId           String?               // House system
  house             House?                @relation(fields: [houseId], references: [id])
  
  // UK-specific identifiers
  upn               String?               @unique // Unique Pupil Number
  admissionNumber   String?
  
  // Academic details
  keyStage          KeyStage
  examBoard         String?               // For GCSE/A-Level students
  
  // Special categories
  senStatus         SENStatus             @default(NONE)
  senDetails        SENDetails?
  ehcpId            String?               // Education, Health and Care Plan
  ehcp              EHCP?                 @relation(fields: [ehcpId], references: [id])
  
  // Vulnerable groups (UK reporting requirements)
  fsm               Boolean               @default(false) // Free School Meals
  pp                Boolean               @default(false) // Pupil Premium
  lac               Boolean               @default(false) // Looked After Child
  eal               Boolean               @default(false) // English as Additional Language
  youngCarer        Boolean               @default(false)
  forcesChild       Boolean               @default(false)
  
  // Gifted & Talented
  giftedTalented    Boolean               @default(false)
  giftedSubjects    String[]
  
  // Medical
  medicalConditions String[]
  allergies         String[]
  medications       String[]
  
  // Behaviour & Attendance
  behaviourRecord   BehaviourRecord?
  attendanceRecord  AttendanceRecord?
  
  // Learning
  learningStyle     LearningStyle?
  subjects          SubjectEnrollment[]
  
  // Relationships
  guardians         StudentGuardian[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum KeyStage {
  EYFS      // Early Years Foundation Stage
  KS1       // Key Stage 1 (Years 1-2)
  KS2       // Key Stage 2 (Years 3-6)
  KS3       // Key Stage 3 (Years 7-9)
  KS4       // Key Stage 4 (Years 10-11)
  KS5       // Key Stage 5 (Years 12-13 / Sixth Form)
}

enum SENStatus {
  NONE
  MONITORING
  SEN_SUPPORT
  EHCP
}

model TeacherProfile {
  id                String                @id @default(cuid())
  userId            String                @unique
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // School details
  schoolId          String
  school            School                @relation(fields: [schoolId], references: [id])
  department        String?
  
  // UK-specific identifiers
  trn               String?               @unique // Teacher Reference Number
  qts               Boolean               @default(false) // Qualified Teacher Status
  qtsDate           DateTime?
  inductionComplete Boolean               @default(false)
  
  // Teaching details
  subjects          TeacherSubject[]
  keyStages         KeyStage[]
  responsibilities  String[]              // Head of Year, SENCO, etc.
  
  // Classes
  classes           Class[]               @relation("ClassTeacher")
  supportClasses    Class[]               @relation("SupportTeacher")
  
  // Time-saving metrics
  weeklyTimeSaved   Int                   @default(0) // Minutes
  automationScore   Float                 @default(0) // 0-100
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model ParentProfile {
  id                String                @id @default(cuid())
  userId            String                @unique
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relationship to students
  students          StudentGuardian[]
  
  // Contact preferences
  preferredContact  ContactMethod         @default(EMAIL)
  contactHours      String?               // e.g., "9am-5pm weekdays"
  
  // Permissions
  permissions       ParentPermissions?
  
  // Engagement metrics
  lastLogin         DateTime?
  engagementScore   Float                 @default(0) // 0-100
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum ContactMethod {
  EMAIL
  SMS
  PHONE
  APP_NOTIFICATION
  WHATSAPP
}

// ==================== SCHOOL & ORGANISATION ====================

model School {
  id                String                @id @default(cuid())
  name              String
  urn               String?               @unique // Unique Reference Number
  dfeNumber         String?               // Department for Education number
  
  // School type
  type              SchoolType
  phase             SchoolPhase
  
  // Address
  address           Address               @relation(fields: [addressId], references: [id])
  addressId         String                @unique
  
  // Contact
  phoneNumber       String
  email             String
  website           String?
  
  // Leadership
  headteacher       String?
  chair             String?               // Chair of Governors
  
  // UK-specific
  localAuthority    String
  ofstedRating      OfstedRating?
  ofstedDate        DateTime?
  
  // Size
  studentCount      Int
  teacherCount      Int
  
  // Features
  hasNursery        Boolean               @default(false)
  hasSixthForm      Boolean               @default(false)
  
  // Relations
  students          StudentProfile[]
  teachers          TeacherProfile[]
  classes           Class[]
  houses            House[]
  terms             Term[]
  
  // Integration
  integrations      SchoolIntegration[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum SchoolType {
  MAINTAINED
  ACADEMY
  FREE_SCHOOL
  INDEPENDENT
  SPECIAL
  PUPIL_REFERRAL_UNIT
}

enum SchoolPhase {
  NURSERY
  PRIMARY
  SECONDARY
  ALL_THROUGH
  SIXTH_FORM
  SPECIAL
}

enum OfstedRating {
  OUTSTANDING
  GOOD
  REQUIRES_IMPROVEMENT
  INADEQUATE
}

// ==================== ACADEMIC STRUCTURE ====================

model Class {
  id                String                @id @default(cuid())
  schoolId          String
  school            School                @relation(fields: [schoolId], references: [id])
  
  // Basic details
  name              String                // e.g., "7A Mathematics"
  code              String                // e.g., "7A-MA"
  academicYearId    String
  academicYear      AcademicYear          @relation(fields: [academicYearId], references: [id])
  
  // Subject & Year
  subjectId         String
  subject           Subject               @relation(fields: [subjectId], references: [id])
  yearGroup         Int
  set               String?               // Ability set (1, 2, 3, etc.)
  
  // Teachers
  teacherId         String
  teacher           TeacherProfile        @relation("ClassTeacher", fields: [teacherId], references: [id])
  supportTeachers   TeacherProfile[]      @relation("SupportTeacher")
  
  // Students
  students          ClassEnrollment[]
  
  // Timetable
  timetableSlots    TimetableSlot[]
  
  // Integration
  googleClassroomId String?
  teamsId           String?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([schoolId, code, academicYearId])
}

model Subject {
  id                String                @id @default(cuid())
  name              String                // e.g., "Mathematics"
  code              String                @unique // e.g., "MA"
  
  // UK curriculum
  nationalCurriculum Boolean              @default(true)
  keyStages         KeyStage[]
  
  // Exam boards (for GCSE/A-Level)
  examBoards        String[]
  
  // Classes
  classes           Class[]
  teacherSubjects   TeacherSubject[]
  enrollments       SubjectEnrollment[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

// ==================== WORKFLOW ENGINE ====================

model Workflow {
  id                String                @id @default(cuid())
  name              String
  description       String?
  type              WorkflowType
  
  // Creator
  creatorId         String
  creator           User                  @relation("WorkflowCreator", fields: [creatorId], references: [id])
  
  // Configuration
  triggers          Json                  // Trigger conditions
  steps             WorkflowStep[]
  
  // Status
  isActive          Boolean               @default(true)
  isTemplate        Boolean               @default(false)
  
  // Metrics
  estimatedTimeSave Int                   // Minutes per execution
  executionCount    Int                   @default(0)
  totalTimeSaved    Int                   @default(0) // Cumulative minutes
  
  // Runs
  runs              WorkflowRun[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum WorkflowType {
  LESSON_PLANNING
  MARKING_ASSISTANT
  PARENT_COMMUNICATION
  REPORT_GENERATION
  ATTENDANCE_TRACKING
  BEHAVIOUR_MANAGEMENT
  SAFEGUARDING_ALERT
  IEP_SCHEDULING
  DATA_ANALYSIS
  CUSTOM
}

model WorkflowStep {
  id                String                @id @default(cuid())
  workflowId        String
  workflow          Workflow              @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  // Step details
  name              String
  type              WorkflowStepType
  order             Int
  
  // Configuration
  config            Json                  // Step-specific configuration
  
  // Conditional logic
  conditions        Json?                 // When to execute this step
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([workflowId, order])
}

enum WorkflowStepType {
  INPUT
  AI_GENERATION
  DATA_FETCH
  CALCULATION
  NOTIFICATION
  EMAIL
  SMS
  INTEGRATION_SYNC
  DOCUMENT_EXPORT
  APPROVAL
  CONDITIONAL
}

model WorkflowRun {
  id                String                @id @default(cuid())
  workflowId        String
  workflow          Workflow              @relation(fields: [workflowId], references: [id])
  
  // Executor
  userId            String
  user              User                  @relation(fields: [userId], references: [id])
  
  // Status
  status            WorkflowRunStatus     @default(PENDING)
  currentStep       Int                   @default(0)
  
  // Data
  input             Json?
  output            Json?
  stepResults       Json?                 // Results from each step
  
  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  timeSaved         Int?                  // Minutes saved
  
  // Error handling
  error             String?
  errorStep         Int?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum WorkflowRunStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

// ==================== GAMIFICATION ====================

model GameProfile {
  id                String                @id @default(cuid())
  userId            String                @unique
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core stats
  level             Int                   @default(1)
  xp                Int                   @default(0)
  totalXp           Int                   @default(0)
  
  // Currency
  coins             Int                   @default(0)
  gems              Int                   @default(0)
  
  // Streaks
  currentStreak     Int                   @default(0)
  longestStreak     Int                   @default(0)
  lastLoginDate     DateTime?
  
  // Battle stats
  battleStats       BattleStats?
  
  // Inventory
  items             GameItem[]
  equippedItems     EquippedItem[]
  
  // Social
  friends           Friendship[]          @relation("GameProfileFriends")
  friendOf          Friendship[]          @relation("FriendOfGameProfile")
  squadMemberships  SquadMember[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model Achievement {
  id                String                @id @default(cuid())
  
  // Basic info
  name              String
  description       String
  icon              String
  
  // Categories
  category          AchievementCategory
  subject           String?               // Subject-specific achievements
  
  // Rarity
  rarity            Rarity
  points            Int                   @default(10)
  xpReward          Int                   @default(100)
  
  // Requirements
  requirements      Json                  // Conditions to unlock
  
  // Progress tracking
  isProgressive     Boolean               @default(false)
  maxProgress       Int?
  
  // Users who earned it
  earnedBy          User[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum AchievementCategory {
  ACADEMIC
  SOCIAL
  ATTENDANCE
  BEHAVIOUR
  PARTICIPATION
  SPECIAL
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model Squad {
  id                String                @id @default(cuid())
  name              String
  description       String?
  icon              String?
  
  // Squad details
  maxMembers        Int                   @default(5)
  isPublic          Boolean               @default(true)
  
  // Requirements
  minLevel          Int                   @default(1)
  requiresApproval  Boolean               @default(false)
  
  // Stats
  totalXp           Int                   @default(0)
  weeklyXp          Int                   @default(0)
  
  // Members
  members           SquadMember[]
  
  // Competitions
  competitions      SquadCompetition[]    @relation("SquadCompetitions")
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

// ==================== COMMUNICATION ====================

model Message {
  id                String                @id @default(cuid())
  
  // Participants
  senderId          String
  sender            User                  @relation("SentMessages", fields: [senderId], references: [id])
  receiverId        String
  receiver          User                  @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  // Content
  subject           String?
  body              String                @db.Text
  
  // Metadata
  priority          MessagePriority       @default(NORMAL)
  category          MessageCategory
  
  // Status
  isRead            Boolean               @default(false)
  readAt            DateTime?
  
  // Translation
  isTranslated      Boolean               @default(false)
  originalLanguage  String?
  translatedBody    String?               @db.Text
  
  // Attachments
  attachments       Attachment[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageCategory {
  GENERAL
  ACADEMIC
  BEHAVIOUR
  ATTENDANCE
  SAFEGUARDING
  ADMIN
}

model Notification {
  id                String                @id @default(cuid())
  userId            String
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Content
  title             String
  message           String
  
  // Type & Category
  type              NotificationType
  category          NotificationCategory
  
  // Action
  actionUrl         String?
  actionData        Json?
  
  // Status
  isRead            Boolean               @default(false)
  readAt            DateTime?
  
  // Delivery
  channels          NotificationChannel[]
  deliveredAt       Json?                 // Track delivery per channel
  
  createdAt         DateTime              @default(now())
  expiresAt         DateTime?
}

enum NotificationType {
  ASSIGNMENT_DUE
  GRADE_POSTED
  ATTENDANCE_ALERT
  BEHAVIOUR_INCIDENT
  MESSAGE_RECEIVED
  WORKFLOW_COMPLETE
  ACHIEVEMENT_EARNED
  SQUAD_INVITE
  SYSTEM_ANNOUNCEMENT
}

enum NotificationCategory {
  ACADEMIC
  SOCIAL
  ADMINISTRATIVE
  SYSTEM
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
  WHATSAPP
}

// ==================== ATTENDANCE & BEHAVIOUR ====================

model AttendanceRecord {
  id                String                @id @default(cuid())
  studentId         String                @unique
  student           StudentProfile        @relation(fields: [studentId], references: [id])
  
  // Current stats
  presentCount      Int                   @default(0)
  authorisedAbsent  Int                   @default(0)
  unauthorisedAbsent Int                  @default(0)
  lateCount         Int                   @default(0)
  
  // Percentage (calculated)
  attendanceRate    Float                 @default(100)
  
  // Detailed records
  records           AttendanceMark[]
  
  updatedAt         DateTime              @updatedAt
}

model AttendanceMark {
  id                String                @id @default(cuid())
  recordId          String
  record            AttendanceRecord      @relation(fields: [recordId], references: [id])
  
  date              DateTime
  session           AttendanceSession     // AM or PM
  code              String                // UK attendance codes
  
  // Additional info
  reason            String?
  minutesLate       Int?
  
  // Who marked it
  markedBy          String?
  markedAt          DateTime              @default(now())
  
  @@unique([recordId, date, session])
}

enum AttendanceSession {
  AM
  PM
}

model BehaviourRecord {
  id                String                @id @default(cuid())
  studentId         String                @unique
  student           StudentProfile        @relation(fields: [studentId], references: [id])
  
  // Points system
  positivePoints    Int                   @default(0)
  negativePoints    Int                   @default(0)
  netPoints         Int                   @default(0)
  
  // Incidents
  incidents         BehaviourIncident[]
  
  // Achievements
  merits            Merit[]
  
  updatedAt         DateTime              @updatedAt
}

model BehaviourIncident {
  id                String                @id @default(cuid())
  recordId          String
  record            BehaviourRecord       @relation(fields: [recordId], references: [id])
  
  // Details
  type              IncidentType
  severity          IncidentSeverity
  description       String                @db.Text
  location          String?
  
  // Points impact
  pointsDeducted    Int                   @default(0)
  
  // Staff involved
  reportedBy        String
  witnessedBy       String[]
  
  // Actions taken
  actions           String[]
  parentNotified    Boolean               @default(false)
  
  // Follow-up
  resolved          Boolean               @default(false)
  resolutionNotes   String?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum IncidentType {
  DISRUPTION
  LATE_TO_CLASS
  NO_HOMEWORK
  UNIFORM_VIOLATION
  INAPPROPRIATE_LANGUAGE
  PHYSICAL_ALTERCATION
  BULLYING
  VANDALISM
  OTHER
}

enum IncidentSeverity {
  MINOR
  MODERATE
  SERIOUS
  SEVERE
}

// ==================== ASSESSMENTS & PROGRESS ====================

model Assessment {
  id                String                @id @default(cuid())
  
  // Basic info
  title             String
  description       String?
  
  // Type & Subject
  type              AssessmentType
  subjectId         String?
  subject           Subject?              @relation(fields: [subjectId], references: [id])
  
  // Target audience
  yearGroup         Int?
  keyStage          KeyStage?
  
  // Configuration
  totalMarks        Int
  passingMarks      Int?
  duration          Int?                  // Minutes
  
  // Questions
  questions         Json                  // Question structure
  markScheme        Json?                 // Marking criteria
  
  // AI features
  aiGenerated       Boolean               @default(false)
  aiMarkingEnabled  Boolean               @default(false)
  
  // Results
  results           AssessmentResult[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum AssessmentType {
  QUIZ
  TEST
  EXAM
  HOMEWORK
  COURSEWORK
  MOCK_EXAM
  DIAGNOSTIC
}

model AssessmentResult {
  id                String                @id @default(cuid())
  assessmentId      String
  assessment        Assessment            @relation(fields: [assessmentId], references: [id])
  userId            String
  user              User                  @relation(fields: [userId], references: [id])
  
  // Scores
  rawScore          Int
  percentage        Float
  grade             String?
  
  // Timing
  startedAt         DateTime
  submittedAt       DateTime?
  timeSpent         Int?                  // Minutes
  
  // Answers & Feedback
  answers           Json
  feedback          Json?
  aiSuggestions     Json?
  
  // Teacher review
  teacherReviewed   Boolean               @default(false)
  teacherComments   String?
  finalScore        Int?
  finalGrade        String?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([assessmentId, userId])
}

// ==================== HELPER MODELS ====================

model Address {
  id                String                @id @default(cuid())
  line1             String
  line2             String?
  town              String
  county            String?
  postcode          String
  country           String                @default("United Kingdom")
  
  school            School?
  profile           Profile?
}

model EmergencyContact {
  id                String                @id @default(cuid())
  profileId         String                @unique
  profile           Profile               @relation(fields: [profileId], references: [id])
  
  name              String
  relationship      String
  phoneNumber       String
  alternativePhone  String?
  email             String?
}

model StudentGuardian {
  id                String                @id @default(cuid())
  studentId         String
  student           StudentProfile        @relation(fields: [studentId], references: [id])
  parentId          String
  parent            ParentProfile         @relation(fields: [parentId], references: [id])
  
  relationship      GuardianRelationship
  isPrimary         Boolean               @default(false)
  hasParentalResponsibility Boolean        @default(true)
  
  // Permissions
  canViewGrades     Boolean               @default(true)
  canViewAttendance Boolean               @default(true)
  canViewBehaviour  Boolean               @default(true)
  canContact        Boolean               @default(true)
  canAuthoriseTrips Boolean               @default(true)
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([studentId, parentId])
}

enum GuardianRelationship {
  MOTHER
  FATHER
  STEP_MOTHER
  STEP_FATHER
  GUARDIAN
  FOSTER_PARENT
  GRANDPARENT
  OTHER
}

// ==================== INTEGRATION MODELS ====================

model UserIntegration {
  id                String                @id @default(cuid())
  userId            String
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  provider          IntegrationProvider
  accessToken       String                @db.Text
  refreshToken      String?               @db.Text
  expiresAt         DateTime?
  
  metadata          Json?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([userId, provider])
}

model SchoolIntegration {
  id                String                @id @default(cuid())
  schoolId          String
  school            School                @relation(fields: [schoolId], references: [id])
  
  provider          IntegrationProvider
  config            Json
  isActive          Boolean               @default(true)
  
  lastSync          DateTime?
  syncErrors        Json?
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([schoolId, provider])
}

enum IntegrationProvider {
  GOOGLE_CLASSROOM
  MICROSOFT_TEAMS
  SIMS
  ARBOR
  EDULINK_ONE
  PARENT_PAY
  WHATSAPP_BUSINESS
}

// ==================== NEXT-AUTH MODELS ====================

model Account {
  id                String                @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?               @db.Text
  access_token      String?               @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?               @db.Text
  session_state     String?
  
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id                String                @id @default(cuid())
  sessionToken      String                @unique
  userId            String
  expires           DateTime
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier        String
  token             String                @unique
  expires           DateTime
  
  @@unique([identifier, token])
}

// ==================== INSTITUTIONAL MANAGEMENT ====================

model Institution {
  id                String                @id @default(cuid())
  name              String
  type              String
  size              String
  
  // Address
  address           String?
  city              String?
  region            String?
  postalCode        String?
  country           String?
  
  // Contact
  phoneNumber       String?
  email             String
  website           String?
  logoUrl           String?
  
  // Status
  isActive          Boolean               @default(true)
  verificationStatus String                @default("PENDING")
  verifiedAt        DateTime?
  
  // Metadata
  notes             String?               @db.Text
  tags              String[]
  customFields      Json?
  
  // Relations
  departments       Department[]
  contacts          InstitutionContact[]
  subscriptions     InstitutionSubscription[]
  users             User[]                @relation("UserInstitution")
  admins            User[]                @relation("InstitutionAdmins")
  managers          User[]                @relation("InstitutionManagers")
  auditLogs         AuditLog[]
  performanceMetrics PerformanceMetric[] @relation("InstitutionMetrics")
  adminsJunction    InstitutionAdmins[]   @relation("InstitutionAdminsJunction")
  
  // Audit
  createdBy         String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

enum InstitutionType {
  SCHOOL
  UNIVERSITY
  COLLEGE
  TRAINING_CENTER
  RESEARCH_INSTITUTE
  GOVERNMENT
  CORPORATE
  NON_PROFIT
  OTHER
}

enum InstitutionSize {
  SMALL
  MEDIUM
  LARGE
  VERY_LARGE
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

// ==================== INSTITUTIONAL MANAGEMENT ENUMS ====================

enum InstitutionTypeEnum {
  SCHOOL
  COLLEGE
  UNIVERSITY
  EDUCATIONAL_TRUST
  PSYCHOLOGY_PRACTICE
  HEALTHCARE_PROVIDER
  LOCAL_AUTHORITY
  GOVERNMENT
  CHARITY
  RESEARCH_INSTITUTION
  CORPORATE
  OTHER
}

enum InstitutionSizeEnum {
  SMALL
  MEDIUM
  LARGE
  VERY_LARGE
}

enum VerificationStatusEnum {
  PENDING
  VERIFIED
  REJECTED
  REVIEW_REQUIRED
}

enum CommunicationTypeEnum {
  EMAIL
  PHONE
  MEETING
  VIDEO_CALL
  CHAT
  IN_PERSON
  OTHER
}

enum CommunicationDirectionEnum {
  INBOUND
  OUTBOUND
}

enum MetricTypeEnum {
  USER_COUNT
  ACTIVE_USER_RATE
  SESSION_COUNT
  AVERAGE_SESSION_DURATION
  ASSESSMENT_COUNT
  INTERVENTION_COUNT
  CONTENT_VIEWS
  FEATURE_USAGE
  CONVERSION_RATE
  RETENTION_RATE
  SATISFACTION_SCORE
}

enum MetricPeriodEnum {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum ActivityTypeEnum {
  PAGE_VIEW
  FEATURE_USE
  CONTENT_INTERACTION
  ASSESSMENT_COMPLETION
  INTERVENTION_CREATION
  SEARCH
  RECOMMENDATION_CLICK
  PROFILE_UPDATE
  RESOURCE_DOWNLOAD
  FEEDBACK_PROVIDED
}

enum InterestSourceEnum {
  EXPLICIT_SELECTION
  CONTENT_INTERACTION
  SEARCH_HISTORY
  ASSESSMENT_FOCUS
  INTERVENTION_THEME
  PROFESSIONAL_PROFILE
  PEER_SIMILARITY
}

enum PartnerTypeEnum {
  REFERRAL
  RESELLER
  INTEGRATION
  CONTENT_PROVIDER
  RESEARCH_PARTNER
  TRAINING_PROVIDER
}

enum PartnerStatusEnum {
  ACTIVE
  PENDING
  INACTIVE
  TERMINATED
}

model Department {
  id                String                @id @default(cuid())
  name              String
  type              DepartmentType
  description       String?               @db.Text
  status            String                @default("ACTIVE")
  
  // Hierarchy
  institutionId     String
  institution       Institution           @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  parentId          String?
  parentDepartment  Department?           @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  childDepartments  Department[]          @relation("DepartmentHierarchy")
  headOfDepartmentId String?
  
  // Status
  isActive          Boolean               @default(true)
  
  // Metadata
  tags              String[]              @default([])
  customFields      Json?
  
  // Relations
  users             User[]                @relation("UserDepartment")
  managers          User[]                @relation("DepartmentManagers")
  membersJunction   DepartmentMembers[]   @relation("DepartmentMembersJunction")
  auditLogs         AuditLog[]
  
  // Audit
  createdBy         String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@index([institutionId])
  @@index([parentId])
}

enum DepartmentType {
  ACADEMIC
  ADMINISTRATIVE
  RESEARCH
  SUPPORT
  SPECIAL
}

model InstitutionContact {
  id                String                @id @default(cuid())
  institutionId     String
  institution       Institution           @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  
  // Contact details
  firstName         String
  lastName          String
  email             String
  phone             String?
  jobTitle          String?
  role              String?
  
  // Flags
  isPrimaryContact  Boolean               @default(false)
  
  // Metadata
  notes             String?               @db.Text
  
  // Relations
  communicationLogs CommunicationLog[]
  headedDepartments Department[]          @relation(fields: [id], references: [headOfDepartmentId])
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@index([institutionId])
}

model InstitutionSubscription {
  id                String                @id @default(cuid())
  institutionId     String
  institution       Institution           @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  
  // Subscription details
  plan              SubscriptionPlan
  status            SubscriptionStatus
  licenseCount      Int
  price             Float
  
  // Billing
  paymentMethod     PaymentMethod
  billingCycle      BillingCycle
  autoRenew         Boolean               @default(true)
  
  // Discount
  discountPercentage Float?
  discountCode      String?
  
  // Dates
  startDate         DateTime
  endDate           DateTime
  
  // Metadata
  notes             String?               @db.Text
  
  // Audit
  auditLogs         AuditLog[]
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@index([institutionId])
  @@index([status])
}

enum SubscriptionPlan {
  BASIC
  STANDARD
  PROFESSIONAL
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum PaymentMethod {
  CREDIT_CARD
  INVOICE
  BANK_TRANSFER
  DIRECT_DEBIT
  OTHER
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

model AuditLog {
  id                String                @id @default(cuid())
  
  // Action details
  action            String
  entityType        String
  entityId          String
  description       String                @db.Text
  
  // User who performed the action
  performedById     String
  performedBy       User                  @relation("AuditLogPerformedBy", fields: [performedById], references: [id])
  
  // Context
  institutionId     String?
  institution       Institution?          @relation(fields: [institutionId], references: [id])
  departmentId      String?
  department        Department?           @relation(fields: [departmentId], references: [id])
  subscriptionId    String?
  subscription      InstitutionSubscription? @relation(fields: [subscriptionId], references: [id])
  
  // Additional data
  metadata          Json?
  
  createdAt         DateTime              @default(now())
  
  @@index([performedById])
  @@index([institutionId])
  @@index([departmentId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// ==================== ADDITIONAL INSTITUTIONAL MODELS ====================

model VolumeDiscountTier {
  id              String   @id @default(uuid())
  plan            String
  minLicenses     Int
  maxLicenses     Int?
  discountRate    Float
  description     String?  @db.Text
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([plan])
  @@index([isActive])
}

model CommunicationLog {
  id              String              @id @default(uuid())
  contactId       String
  contact         InstitutionContact  @relation(fields: [contactId], references: [id])
  type            CommunicationTypeEnum
  direction       CommunicationDirectionEnum
  subject         String?
  content         String              @db.Text
  timestamp       DateTime            @default(now())
  createdById     String
  createdBy       User                @relation("CommunicationLogs", fields: [createdById], references: [id])
  followUpDate    DateTime?
  resolved        Boolean             @default(false)
  attachments     Json?
  tags            String[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([contactId])
  @@index([createdById])
  @@index([type])
  @@index([timestamp])
}

model PerformanceMetric {
  id              String      @id @default(uuid())
  institutionId   String
  institution     Institution @relation("InstitutionMetrics", fields: [institutionId], references: [id])
  metricType      MetricTypeEnum
  value           Float
  unit            String
  timestamp       DateTime    @default(now())
  period          MetricPeriodEnum
  metadata        Json?
  createdAt       DateTime    @default(now())

  @@index([institutionId])
  @@index([metricType])
  @@index([period])
  @@index([timestamp])
}

model UserActivity {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation("UserActivities", fields: [userId], references: [id])
  activityType  ActivityTypeEnum
  resourceType  String?
  resourceId    String?
  duration      Int?
  metadata      Json?
  timestamp     DateTime @default(now())
  sessionId     String?

  @@index([userId])
  @@index([activityType])
  @@index([resourceType, resourceId])
  @@index([timestamp])
}

model UserInterest {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation("UserInterests", fields: [userId], references: [id])
  interestArea      String
  strengthScore     Float
  source            InterestSourceEnum
  firstDetectedAt   DateTime @default(now())
  lastConfirmedAt   DateTime @default(now())
  isActive          Boolean  @default(true)
  metadata          Json?

  @@index([userId])
  @@index([interestArea])
  @@index([source])
}

model PartnerOrganization {
  id              String   @id @default(uuid())
  name            String
  type            PartnerTypeEnum
  contactName     String?
  contactEmail    String?
  contactPhone    String?
  website         String?
  partnerSince    DateTime @default(now())
  status          PartnerStatusEnum @default(ACTIVE)
  referralCode    String?  @unique
  referralCount   Int      @default(0)
  commissionRate  Float?
  paymentDetails  Json?
  agreementUrl    String?
  notes           String?  @db.Text
  lastReviewDate  DateTime?
  nextReviewDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([referralCode])
}

model InstitutionAdmins {
  institutionId String
  institution   Institution @relation("InstitutionAdminsJunction", fields: [institutionId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation("InstitutionAdminsJunction", fields: [userId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())

  @@id([institutionId, userId])
  @@index([institutionId])
  @@index([userId])
}

model DepartmentMembers {
  departmentId String
  department   Department @relation("DepartmentMembersJunction", fields: [departmentId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation("DepartmentMembersJunction", fields: [userId], references: [id], onDelete: Cascade)
  joinedAt     DateTime   @default(now())

  @@id([departmentId, userId])
  @@index([departmentId])
  @@index([userId])
}