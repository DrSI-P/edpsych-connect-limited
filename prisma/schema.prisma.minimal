datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Add missing Assessment model to match API usage

model RestorativeIncident {
  id                String      @id @default(uuid())
  title             String
  type              String
  participants      String
  description       String
  severity          String
  location          String?
  dateTime          DateTime
  initialApproach   String?
  desiredOutcomes   String?
  status            String      @default("open")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  notes             Json?
  metrics           Json?
  recommendedTemplates Json?

  @@index([type])
  @@index([status])
  @@index([dateTime])
}

model Assessment {
  id        String   @id @default(uuid())
  title     String
  status    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssessmentResult {
  id            String   @id @default(uuid())
  assessmentId  String
  userId        String
  answers       Json
  score         Int?
  maxScore      Int?
  feedback      String?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([assessmentId])
  @@index([userId])
  @@index([completedAt])
}

model BetaTester {
  id                        String   @id @default(uuid())
  userId                    String   @unique
  accessCode                String
  status                    String   @default("active")
  registeredAt              DateTime @default(now())
  lastUpdated               DateTime @updatedAt
  features                  Json?
  expiresAt                 DateTime?
  confidentialitySignatureId String?

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model LegalDocument {
  id            String   @id @default(uuid())
  type          String
  version       String
  title         String
  content       String
  status        String   @default("draft")
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([effectiveDate])
}

model User {
  id                    String              @id @default(uuid())
  email                 String              @unique
  roles                 String[]
  institutionalAccess   Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  institutionAdminsJunction InstitutionAdmins[]
  departmentMembersJunction DepartmentMembers[]
  activities            UserActivity[]
  interests             UserInterest[]
  communicationLogs     CommunicationLog[]
  auditLogs             AuditLog[]

  @@index([email])
}
model BetaAccessCode {
  id            String   @id @default(uuid())
  code          String   @unique
  expiresAt     DateTime?
  maxUses       Int      @default(1)
  remainingUses Int      @default(1)
  role          String   @default("BETA_TESTER")
  features      String[]
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([code])
  @@index([expiresAt])
  @@index([remainingUses])
}

model BetaAccessCodeUsage {
  id            String   @id @default(uuid())
  accessCodeId  String
  userId        String
  usedAt        DateTime @default(now())

  @@index([accessCodeId])
  @@index([userId])
  @@index([usedAt])
}

// Core Platform Models
model School {
  id          String   @id @default(uuid())
  name        String
  type        String
  address     String?
  city        String?
  county      String?
  postcode    String?
  country     String   @default("UK")
  phone       String?
  email       String?
  website     String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([type])
  @@index([status])
}

model StudentProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  schoolId    String?
  yearGroup   String?
  subjects    String[]
  specialNeeds String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([schoolId])
}

model TeacherProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  schoolId    String?
  subjects    String[]
  qualifications String[]
  experience  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([schoolId])
}

// ==================== INSTITUTIONAL MANAGEMENT ENUMS ====================

enum InstitutionTypeEnum {
  SCHOOL
  COLLEGE
  UNIVERSITY
  EDUCATIONAL_TRUST
  PSYCHOLOGY_PRACTICE
  HEALTHCARE_PROVIDER
  LOCAL_AUTHORITY
  GOVERNMENT
  CHARITY
  RESEARCH_INSTITUTION
  CORPORATE
  OTHER
}

enum InstitutionSizeEnum {
  SMALL
  MEDIUM
  LARGE
  VERY_LARGE
}

enum VerificationStatusEnum {
  PENDING
  VERIFIED
  REJECTED
  REVIEW_REQUIRED
}

enum CommunicationTypeEnum {
  EMAIL
  PHONE
  MEETING
  VIDEO_CALL
  CHAT
  IN_PERSON
  OTHER
}

enum CommunicationDirectionEnum {
  INBOUND
  OUTBOUND
}

enum MetricTypeEnum {
  USER_COUNT
  ACTIVE_USER_RATE
  SESSION_COUNT
  AVERAGE_SESSION_DURATION
  ASSESSMENT_COUNT
  INTERVENTION_COUNT
  CONTENT_VIEWS
  FEATURE_USAGE
  CONVERSION_RATE
  RETENTION_RATE
  SATISFACTION_SCORE
}

enum MetricPeriodEnum {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum ActivityTypeEnum {
  PAGE_VIEW
  FEATURE_USE
  CONTENT_INTERACTION
  ASSESSMENT_COMPLETION
  INTERVENTION_CREATION
  SEARCH
  RECOMMENDATION_CLICK
  PROFILE_UPDATE
  RESOURCE_DOWNLOAD
  FEEDBACK_PROVIDED
}

enum InterestSourceEnum {
  EXPLICIT_SELECTION
  CONTENT_INTERACTION
  SEARCH_HISTORY
  ASSESSMENT_FOCUS
  INTERVENTION_THEME
  PROFESSIONAL_PROFILE
  PEER_SIMILARITY
}

enum PartnerTypeEnum {
  REFERRAL
  RESELLER
  INTEGRATION
  CONTENT_PROVIDER
  RESEARCH_PARTNER
  TRAINING_PROVIDER
}

enum PartnerStatusEnum {
  ACTIVE
  PENDING
  INACTIVE
  TERMINATED
}

enum DepartmentType {
  ACADEMIC
  ADMINISTRATIVE
  RESEARCH
  SUPPORT
  SPECIAL
}

// Institutional Management Models
model Institution {
  id          String   @id @default(uuid())
  name        String
  type        String
  size        String
  address     String?
  city        String?
  county      String?
  postcode    String?
  country     String   @default("UK")
  phone       String?
  email       String?
  website     String?
  logoUrl     String?
  region      String?
  status      String   @default("active")
  verificationStatus String @default("pending")
  verifiedAt  DateTime?
  notes       String?  @db.Text
  tags        String[] @default([])
  customFields Json?
  isActive    Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  departments       Department[]
  contacts          InstitutionContact[]
  subscriptions     InstitutionSubscription[]
  performanceMetrics PerformanceMetric[]
  auditLogs         AuditLog[]            @relation("InstitutionAuditLogs")
  adminsJunction    InstitutionAdmins[]

  @@index([name])
  @@index([type])
  @@index([status])
  @@index([verificationStatus])
}

model Department {
  id                    String       @id @default(uuid())
  institutionId         String
  institution           Institution  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  name                  String
  description           String?      @db.Text
  type                  DepartmentType
  parentDepartmentId    String?
  parentDepartment      Department?  @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  childDepartments      Department[] @relation("DepartmentHierarchy")
  headOfDepartmentId    String?
  headOfDepartment      InstitutionContact? @relation("DepartmentHead", fields: [headOfDepartmentId], references: [id])
  status                String       @default("ACTIVE")
  isActive              Boolean      @default(true)
  tags                  String[]     @default([])
  customFields          Json?
  createdBy             String
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  membersJunction       DepartmentMembers[]
  auditLogs             AuditLog[]   @relation("DepartmentAuditLogs")

  @@index([institutionId])
  @@index([parentDepartmentId])
  @@index([headOfDepartmentId])
  @@index([status])
}

model InstitutionContact {
  id            String   @id @default(uuid())
  institutionId String
  departmentId  String?
  name          String
  role          String
  email         String
  phone         String?
  isPrimary     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([institutionId])
  @@index([departmentId])
  @@index([email])
}

// Legal and Compliance Models
model LegalSignature {
  id                String   @id @default(uuid())
  userId            String
  agreementType     String
  agreementVersion  String
  signatureData     String
  ipAddress         String?
  userAgent         String?
  signedAt          DateTime @default(now())
  revokedAt         DateTime?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([agreementType])
  @@index([status])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// User Preferences and Analytics
model UserPreference {
  id        String   @id @default(uuid())
  userId    String
  category  String
  type      String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([category])
  @@index([type])
}

// Subscription and Billing Models
model InstitutionSubscription {
  id            String   @id @default(uuid())
  institutionId String
  plan          String
  status        String   @default("active")
  tier          String?
  subscriptionId String?
  startDate     DateTime?
  endDate       DateTime?
  inTrial       Boolean  @default(false)
  cancelAtPeriodEnd Boolean @default(false)
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([institutionId])
  @@index([plan])
  @@index([status])
  @@index([endDate])
}

// Secure Storage Model for Legal Documents
model SecureDocument {
  id        String   @id @default(uuid())
  path      String   @unique
  content   String   @db.Text
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([path])
}

// Professional Development / Training Centre Models
model Course {
  id                String             @id @default(uuid())
  title             String
  description       String             @db.Text
  longDescription   String             @db.Text
  category          String
  level             String
  duration          Int
  cpdHours          Int
  imageUrl          String?
  instructorId      String
  status            String             @default("draft")
  price             Int                @default(0)
  currency          String             @default("GBP")
  certificateAvailable Boolean         @default(true)
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  instructor        CourseInstructor   @relation(fields: [instructorId], references: [id])
  modules           CourseModule[]
  enrollments       CourseEnrollment[]
  certificates      Certificate[]
  reviews           CourseReview[]

  @@index([category])
  @@index([level])
  @@index([status])
  @@index([instructorId])
}

model CourseInstructor {
  id          String   @id @default(uuid())
  name        String
  title       String
  bio         String   @db.Text
  email       String   @unique
  imageUrl    String?
  expertise   String[]
  credentials Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courses     Course[]

  @@index([email])
}

model CourseModule {
  id          String         @id @default(uuid())
  courseId    String
  title       String
  description String?
  orderIndex  Int
  duration    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     CourseLesson[]

  @@index([courseId])
  @@index([orderIndex])
}

model CourseLesson {
  id          String   @id @default(uuid())
  moduleId    String
  title       String
  type        String
  duration    Int
  contentUrl  String?
  content     String?  @db.Text
  orderIndex  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  module      CourseModule          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]

  @@index([moduleId])
  @@index([orderIndex])
}

model CourseEnrollment {
  id              String    @id @default(uuid())
  userId          String
  courseId        String
  status          String    @default("active")
  progress        Int       @default(0)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  lastAccessedAt  DateTime  @default(now())
  timeSpent       Int       @default(0)
  certificateId   String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  course          Course         @relation(fields: [courseId], references: [id])
  certificate     Certificate?   @relation(fields: [certificateId], references: [id])
  lessonProgress  LessonProgress[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model LessonProgress {
  id           String           @id @default(uuid())
  enrollmentId String
  lessonId     String
  completed    Boolean          @default(false)
  score        Int?
  timeSpent    Int              @default(0)
  completedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  enrollment   CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson       CourseLesson     @relation(fields: [lessonId], references: [id])

  @@unique([enrollmentId, lessonId])
  @@index([enrollmentId])
  @@index([lessonId])
}

model Certificate {
  id              String             @id @default(uuid())
  userId          String
  courseId        String
  enrollmentId    String?            @unique
  issueDate       DateTime           @default(now())
  completionDate  DateTime
  verificationCode String            @unique
  grade           String?
  skills          String[]
  metadata        Json?
  status          String             @default("active")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  course          Course             @relation(fields: [courseId], references: [id])
  enrollment      CourseEnrollment?

  @@index([userId])
  @@index([courseId])
  @@index([verificationCode])
  @@index([issueDate])
}

model CPDEntry {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime
  activity    String
  category    String
  hours       Float
  provider    String
  certificate Boolean  @default(false)
  notes       String?  @db.Text
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([date])
  @@index([category])
}

model CourseReview {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?  @db.Text
  helpful   Int      @default(0)
  reported  Boolean  @default(false)
  status    String   @default("published")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([status])
}